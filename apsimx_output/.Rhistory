library(lme4)
library(Matrix)
# Sample 1/5 of the data
sampled_final_data <- final_data[seq(1, nrow(final_data), 12), ]
# Adjusted Mixed Model for YLD_BE, treating MOM and DAD as random effects
mm_yld <- lmer(YLD_BE ~ MST + loc + (1|TIMES_TWO) + (1|DAD) + (1|MOM), data = sampled_final_data)
library(lme4)
library(Matrix)
# Sample 1/5 of the data
sampled_final_data <- final_data[seq(1, nrow(final_data), 12), ]
# Adjusted Mixed Model for YLD_BE, treating MOM and DAD as random effects
mm_yld <- lmer(YLD_BE ~ MST + LOC + (1|TIMES_TWO) + (1|DAD) + (1|MOM), data = sampled_final_data)
summary(mm_yld)
# Adjusted Mixed Model for TWT, treating MOM and DAD as random effects
mm_twt <- lmer(TWT ~ MST + LOC + (1|TIMES_TWO) + (1|DAD) + (1|MOM), data = sampled_final_data)
summary(mm_twt)
# Making predictions with MST set to the mean value from training data
predictions_mm_yld <- predict(mm_yld, newdata = final_test_data_filtered, re.form = NULL)
predictions_mm_twt <- predict(mm_twt, newdata = final_test_data_filtered, re.form = NULL)
# Manual calculation of MAE and RMSE for YLD_BE
actuals_yld <- final_test_data_filtered$YLD_BE
preds_yld <- predictions_mm_yld
mae_mm_yld <- mean(abs(preds_yld - actuals_yld), na.rm = TRUE)
rmse_mm_yld <- sqrt(mean((preds_yld - actuals_yld)^2, na.rm = TRUE))
# Manual calculation of MAE and RMSE for TWT
actuals_twt <- final_test_data_filtered$TWT
preds_twt <- predictions_mm_twt
mae_mm_twt <- mean(abs(preds_twt - actuals_twt), na.rm = TRUE)
rmse_mm_twt <- sqrt(mean((preds_twt - actuals_twt)^2, na.rm = TRUE))
# Print the evaluation results
cat("Mixed Model YLD_BE - MAE:", mae_mm_yld, "RMSE:", rmse_mm_yld, "\n")
cat("Mixed Model TWT - MAE:", mae_mm_twt, "RMSE:", rmse_mm_twt, "\n")
library(performance)
r_squared_mm_yld <- r2(mm_yld)
r_squared_mm_twt <- r2(mm_twt)
# Print the R-squared values
print(r_squared_mm_yld)
print(r_squared_mm_twt)
# Calculate average YLD_BE and TWT for each parent combination in the test data
avg_yld_by_parents <- final_test_data_filtered %>%
group_by(DAD, MOM) %>%
summarise(avg_YLD_BE = mean(YLD_BE, na.rm = TRUE), .groups = 'drop')
library(dplyr)
# Calculate average YLD_BE and TWT for each parent combination in the test data
avg_yld_by_parents <- final_test_data_filtered %>%
group_by(DAD, MOM) %>%
summarise(avg_YLD_BE = mean(YLD_BE, na.rm = TRUE), .groups = 'drop')
avg_twt_by_parents <- final_test_data_filtered %>%
group_by(DAD, MOM) %>%
summarise(avg_TWT = mean(TWT, na.rm = TRUE), .groups = 'drop')
# Merge the averages back into the test data
final_test_data_filtered <- final_test_data_filtered %>%
left_join(avg_yld_by_parents, by = c("DAD", "MOM")) %>%
left_join(avg_twt_by_parents, by = c("DAD", "MOM"))
# Calculate MSE against the average YLD_BE for each parent combination
mse_yld_against_avg <- mean((predictions_mm_yld - final_test_data_filtered$avg_YLD_BE)^2, na.rm = TRUE)
print(mse_yld_against_avg)
# Calculate MSE against the average TWT for each parent combination
mse_twt_against_avg <- mean((predictions_mm_twt - final_test_data_filtered$avg_TWT)^2, na.rm = TRUE)
print(mse_twt_against_avg)
library(lme4)
library(Matrix)
# Sample 1/5 of the data
sampled_final_data <- final_data[seq(1, nrow(final_data), 10), ]
# Adjusted Mixed Model for YLD_BE, treating MOM and DAD as random effects
mm_yld <- lmer(YLD_BE ~ MST + LOC + (1|TIMES_TWO) + (1|DAD) + (1|MOM), data = sampled_final_data)
summary(mm_yld)
# Adjusted Mixed Model for TWT, treating MOM and DAD as random effects
mm_twt <- lmer(TWT ~ MST + LOC + (1|TIMES_TWO) + (1|DAD) + (1|MOM), data = sampled_final_data)
summary(mm_twt)
# Making predictions with MST set to the mean value from training data
predictions_mm_yld <- predict(mm_yld, newdata = final_test_data_filtered, re.form = NULL)
predictions_mm_twt <- predict(mm_twt, newdata = final_test_data_filtered, re.form = NULL)
# Manual calculation of MAE and RMSE for YLD_BE
actuals_yld <- final_test_data_filtered$YLD_BE
preds_yld <- predictions_mm_yld
mae_mm_yld <- mean(abs(preds_yld - actuals_yld), na.rm = TRUE)
rmse_mm_yld <- sqrt(mean((preds_yld - actuals_yld)^2, na.rm = TRUE))
# Manual calculation of MAE and RMSE for TWT
actuals_twt <- final_test_data_filtered$TWT
preds_twt <- predictions_mm_twt
mae_mm_twt <- mean(abs(preds_twt - actuals_twt), na.rm = TRUE)
rmse_mm_twt <- sqrt(mean((preds_twt - actuals_twt)^2, na.rm = TRUE))
# Print the evaluation results
cat("Mixed Model YLD_BE - MAE:", mae_mm_yld, "RMSE:", rmse_mm_yld, "\n")
cat("Mixed Model TWT - MAE:", mae_mm_twt, "RMSE:", rmse_mm_twt, "\n")
library(performance)
r_squared_mm_yld <- r2(mm_yld)
r_squared_mm_twt <- r2(mm_twt)
# Print the R-squared values
print(r_squared_mm_yld)
print(r_squared_mm_twt)
library(dplyr)
# Calculate average YLD_BE and TWT for each parent combination in the test data
avg_yld_by_parents <- final_test_data_filtered %>%
group_by(DAD, MOM) %>%
summarise(avg_YLD_BE = mean(YLD_BE, na.rm = TRUE), .groups = 'drop')
avg_twt_by_parents <- final_test_data_filtered %>%
group_by(DAD, MOM) %>%
summarise(avg_TWT = mean(TWT, na.rm = TRUE), .groups = 'drop')
# Merge the averages back into the test data
final_test_data_filtered <- final_test_data_filtered %>%
left_join(avg_yld_by_parents, by = c("DAD", "MOM")) %>%
left_join(avg_twt_by_parents, by = c("DAD", "MOM"))
# Calculate MSE against the average YLD_BE for each parent combination
mse_yld_against_avg <- mean((predictions_mm_yld - final_test_data_filtered$avg_YLD_BE)^2, na.rm = TRUE)
print(mse_yld_against_avg)
# Calculate MSE against the average TWT for each parent combination
mse_twt_against_avg <- mean((predictions_mm_twt - final_test_data_filtered$avg_TWT)^2, na.rm = TRUE)
print(mse_twt_against_avg)
par(mfrow = c(2, 1)) # Plotting in a 2x1 grid
plot(predict(mm_yld), residuals(mm_yld), main = "Residuals vs Fitted for YLD_BE", xlab = "Fitted values", ylab = "Residuals")
abline(h = 0, col = "red")
plot(predict(mm_twt), residuals(mm_twt), main = "Residuals vs Fitted for TWT", xlab = "Fitted values", ylab = "Residuals")
abline(h = 0, col = "red")
shiny::runApp('GitHub/APSIMX_SeasonalCharacterization-main')
library(pheatmap)
install.packages("pheatmap")
install.packages("janitor")
library(pheatmap)
library(janitor)
library(dplyr)
library(tidyverse)
library(esquisse)
library(readr)
library(RColorBrewer)
var <- "Rain"
gen <- 1
daily_charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/daily_charact_x.csv")
charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/charact_x.csv")
varchoice <- daily_charact_x %>% ungroup() %>%
select(where(is.numeric) & !c(DOY,Stage,id_trial,Yieldkgha,Period)) %>% names()
for(var in varchoice){
var_mat <- filter(charact_x, Genetics == gen) %>% select(Site, starts_with(var)) %>%
group_by(Site) %>% summarize(across(where(is.numeric), mean)) %>% column_to_rownames("Site") %>%
remove_empty(which = "rows") %>%
as.matrix()
pheatmap(var_mat, angle_col = 45,
color=brewer.pal(11,"RdBu"),
fontsize = 10,
display_numbers = round(var_mat, 2),
number_color = "white",
#scale = "column",
number_format = "%.2f",
legend = F,
cluster_cols = F,
cluster_rows = F,
main = paste0("Means of ",var," by Site"))
}
#site, year, sowing, harvest doys for trials
#for trials that reached harvest
sysh_success <- charact_x %>% filter(!is.na(Start_DOY_7)) %>% mutate(sow_doy = Start_DOY_1, harvest_doy = Start_DOY_7 - 1) %>%
select(id_trial, Site, Year, Genetics, sow_doy, harvest_doy) %>% mutate(Stage = 11)
#get fake harvest date for failed trials, which will be the last day the plant was developing
sysh_failed <- charact_x %>% filter(is.na(Start_DOY_7)) %>% mutate(sow_doy = Start_DOY_1) %>% select(id_trial, Site, Year, Genetics, sow_doy)
fake_harvest <- daily_charact_x %>% select(DOY, id_trial, Stage) %>% filter(id_trial %in% sysh_failed$id_trial) %>%
group_by(id_trial) %>% filter(Stage == max(Stage)) %>% filter(DOY == min(DOY)) %>% #get date of highest stage of development
rename(harvest_doy = DOY)
sysh <- left_join(sysh_failed, fake_harvest) %>% rbind(sysh_success) %>% arrange(id_trial)
#accumulated precipitation and thermal time from time of sowing to time of harvest (or end of development for unharvested trials)
fullseason <- daily_charact_x %>% select(id_trial, DOY, AccPrecip, AccTT) %>% group_by(id_trial) %>% left_join(sysh) %>%
filter(DOY >= sow_doy & DOY <= harvest_doy) %>% summarize(AccPrecip = max(AccPrecip) - min(AccPrecip), AccTT = max(AccTT) - min(AccTT)) %>%
left_join(sysh)
#scaled accumulated precip and thermal time, by maturity and site
fullseason_comp <- fullseason %>% group_by(Site) %>%
mutate(scale_AccPrecip = as.numeric(scale(AccPrecip)),
scale_AccTT = as.numeric(scale(AccTT)))
esquisser(fullseason_comp)
current_year <- as.numeric(substr(Sys.time(),1,4)) - 1
bigmet <- data.frame()
library(pheatmap)
library(janitor)
library(dplyr)
library(tidyverse)
library(esquisse)
library(readr)
library(RColorBrewer)
var <- "Rain"
gen <- 3
daily_charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/daily_charact_x.csv")
charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/charact_x.csv")
varchoice <- daily_charact_x %>% ungroup() %>%
select(where(is.numeric) & !c(DOY,Stage,id_trial,Yieldkgha,Period)) %>% names()
for(var in varchoice){
var_mat <- filter(charact_x, Genetics == gen) %>% select(Site, starts_with(var)) %>%
group_by(Site) %>% summarize(across(where(is.numeric), mean)) %>% column_to_rownames("Site") %>%
remove_empty(which = "rows") %>%
as.matrix()
pheatmap(var_mat, angle_col = 45,
color=brewer.pal(11,"RdBu"),
fontsize = 10,
display_numbers = round(var_mat, 2),
number_color = "white",
#scale = "column",
number_format = "%.2f",
legend = F,
cluster_cols = F,
cluster_rows = F,
main = paste0("Means of ",var," by Site"))
}
library(pheatmap)
library(janitor)
library(dplyr)
library(tidyverse)
library(esquisse)
library(readr)
library(RColorBrewer)
var <- "Rain"
gen <- 3
daily_charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/daily_charact_x.csv")
charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/charact_x.csv")
varchoice <- daily_charact_x %>% ungroup() %>%
select(where(is.numeric) & !c(DOY,Stage,id_trial,Yieldkgha,Period)) %>% names()
for(var in varchoice){
var_mat <- filter(charact_x, Genetics == gen) %>% select(Site, starts_with(var)) %>%
group_by(Site) %>% summarize(across(where(is.numeric), mean)) %>% column_to_rownames("Site") %>%
remove_empty(which = "rows") %>%
as.matrix()
pheatmap(var_mat, angle_col = 45,
color=brewer.pal(11,"RdBu"),
fontsize = 10,
display_numbers = round(var_mat, 2),
number_color = "white",
#scale = "column",
number_format = "%.2f",
legend = F,
cluster_cols = F,
cluster_rows = F,
main = paste0("Means of ",var," by Site"))
}
library(pheatmap)
library(janitor)
library(dplyr)
library(tidyverse)
library(esquisse)
library(readr)
library(RColorBrewer)
var <- "Rain"
gen <- 3
daily_charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/daily_charact_x.csv")
charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/charact_x.csv")
varchoice <- daily_charact_x %>% ungroup() %>%
select(where(is.numeric) & !c(DOY,Stage,id_trial,Yieldkgha,Period)) %>% names()
for(var in varchoice){
var_mat <- filter(charact_x, Genetics == gen) %>% select(Site, starts_with(var)) %>%
group_by(Site) %>% summarize(across(where(is.numeric), mean)) %>% column_to_rownames("Site") %>%
remove_empty(which = "rows") %>%
as.matrix()
pheatmap(var_mat, angle_col = 45,
color=brewer.pal(11,"RdBu"),
fontsize = 10,
display_numbers = round(var_mat, 2),
number_color = "white",
#scale = "column",
number_format = "%.2f",
legend = F,
cluster_cols = F,
cluster_rows = F,
main = paste0("Means of ",var," by Site"))
}
library(pheatmap)
library(janitor)
library(dplyr)
library(tidyverse)
library(esquisse)
library(readr)
library(RColorBrewer)
var <- "Rain"
gen <- 2
daily_charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/daily_charact_x.csv")
charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/charact_x.csv")
varchoice <- daily_charact_x %>% ungroup() %>%
select(where(is.numeric) & !c(DOY,Stage,id_trial,Yieldkgha,Period)) %>% names()
for(var in varchoice){
var_mat <- filter(charact_x, Genetics == gen) %>% select(Site, starts_with(var)) %>%
group_by(Site) %>% summarize(across(where(is.numeric), mean)) %>% column_to_rownames("Site") %>%
remove_empty(which = "rows") %>%
as.matrix()
pheatmap(var_mat, angle_col = 45,
color=brewer.pal(11,"RdBu"),
fontsize = 10,
display_numbers = round(var_mat, 2),
number_color = "white",
#scale = "column",
number_format = "%.2f",
legend = F,
cluster_cols = F,
cluster_rows = F,
main = paste0("Means of ",var," by Site"))
}
#site, year, sowing, harvest doys for trials
#for trials that reached harvest
sysh_success <- charact_x %>% filter(!is.na(Start_DOY_7)) %>% mutate(sow_doy = Start_DOY_1, harvest_doy = Start_DOY_7 - 1) %>%
select(id_trial, Site, Year, Genetics, sow_doy, harvest_doy) %>% mutate(Stage = 11)
#get fake harvest date for failed trials, which will be the last day the plant was developing
sysh_failed <- charact_x %>% filter(is.na(Start_DOY_7)) %>% mutate(sow_doy = Start_DOY_1) %>% select(id_trial, Site, Year, Genetics, sow_doy)
fake_harvest <- daily_charact_x %>% select(DOY, id_trial, Stage) %>% filter(id_trial %in% sysh_failed$id_trial) %>%
group_by(id_trial) %>% filter(Stage == max(Stage)) %>% filter(DOY == min(DOY)) %>% #get date of highest stage of development
rename(harvest_doy = DOY)
sysh <- left_join(sysh_failed, fake_harvest) %>% rbind(sysh_success) %>% arrange(id_trial)
#accumulated precipitation and thermal time from time of sowing to time of harvest (or end of development for unharvested trials)
fullseason <- daily_charact_x %>% select(id_trial, DOY, AccPrecip, AccTT) %>% group_by(id_trial) %>% left_join(sysh) %>%
filter(DOY >= sow_doy & DOY <= harvest_doy) %>% summarize(AccPrecip = max(AccPrecip) - min(AccPrecip), AccTT = max(AccTT) - min(AccTT)) %>%
left_join(sysh)
#scaled accumulated precip and thermal time, by maturity and site
fullseason_comp <- fullseason %>% group_by(Site) %>%
mutate(scale_AccPrecip = as.numeric(scale(AccPrecip)),
scale_AccTT = as.numeric(scale(AccTT)))
esquisser(fullseason_comp)
#within sites
wthn_sites <- filtmet %>% summarize(acc_precip = sum(rain), acc_tt = sum(tt))
library(pheatmap)
library(janitor)
library(dplyr)
library(tidyverse)
library(esquisse)
library(readr)
library(RColorBrewer)
var <- "Rain"
gen <- 2
daily_charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/daily_charact_x.csv")
charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/charact_x.csv")
varchoice <- daily_charact_x %>% ungroup() %>%
select(where(is.numeric) & !c(DOY,Stage,id_trial,Yieldkgha,Period)) %>% names()
for(var in varchoice){
var_mat <- filter(charact_x, Genetics == gen) %>% select(Site, starts_with(var)) %>%
group_by(Site) %>% summarize(across(where(is.numeric), mean)) %>% column_to_rownames("Site") %>%
remove_empty(which = "rows") %>%
as.matrix()
pheatmap(var_mat, angle_col = 45,
color=brewer.pal(11,"RdBu"),
fontsize = 10,
display_numbers = round(var_mat, 2),
number_color = "white",
#scale = "column",
number_format = "%.2f",
legend = F,
cluster_cols = F,
cluster_rows = F,
main = paste0("Means of ",var," by Site"))
}
#site, year, sowing, harvest doys for trials
#for trials that reached harvest
sysh_success <- charact_x %>% filter(!is.na(Start_DOY_7)) %>% mutate(sow_doy = Start_DOY_1, harvest_doy = Start_DOY_7 - 1) %>%
select(id_trial, Site, Year, Genetics, sow_doy, harvest_doy) %>% mutate(Stage = 11)
#get fake harvest date for failed trials, which will be the last day the plant was developing
sysh_failed <- charact_x %>% filter(is.na(Start_DOY_7)) %>% mutate(sow_doy = Start_DOY_1) %>% select(id_trial, Site, Year, Genetics, sow_doy)
fake_harvest <- daily_charact_x %>% select(DOY, id_trial, Stage) %>% filter(id_trial %in% sysh_failed$id_trial) %>%
group_by(id_trial) %>% filter(Stage == max(Stage)) %>% filter(DOY == min(DOY)) %>% #get date of highest stage of development
rename(harvest_doy = DOY)
sysh <- left_join(sysh_failed, fake_harvest) %>% rbind(sysh_success) %>% arrange(id_trial)
#accumulated precipitation and thermal time from time of sowing to time of harvest (or end of development for unharvested trials)
fullseason <- daily_charact_x %>% select(id_trial, DOY, AccPrecip, AccTT) %>% group_by(id_trial) %>% left_join(sysh) %>%
filter(DOY >= sow_doy & DOY <= harvest_doy) %>% summarize(AccPrecip = max(AccPrecip) - min(AccPrecip), AccTT = max(AccTT) - min(AccTT)) %>%
left_join(sysh)
#scaled accumulated precip and thermal time, by maturity and site
fullseason_comp <- fullseason %>% group_by(Site) %>%
mutate(scale_AccPrecip = as.numeric(scale(AccPrecip)),
scale_AccTT = as.numeric(scale(AccTT)))
esquisser(fullseason_comp)
library(pheatmap)
library(janitor)
library(dplyr)
library(tidyverse)
library(esquisse)
library(readr)
library(RColorBrewer)
var <- "Rain"
gen <- 2
daily_charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/daily_charact_x.csv")
charact_x <- read_csv("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization-main/apsimx_output/output/charact_x.csv")
varchoice <- daily_charact_x %>% ungroup() %>%
select(where(is.numeric) & !c(DOY,Stage,id_trial,Yieldkgha,Period)) %>% names()
for(var in varchoice){
var_mat <- filter(charact_x, Genetics == gen) %>% select(Site, starts_with(var)) %>%
group_by(Site) %>% summarize(across(where(is.numeric), mean)) %>% column_to_rownames("Site") %>%
remove_empty(which = "rows") %>%
as.matrix()
pheatmap(var_mat, angle_col = 45,
color=brewer.pal(11,"RdBu"),
fontsize = 10,
display_numbers = round(var_mat, 2),
number_color = "white",
#scale = "column",
number_format = "%.2f",
legend = F,
cluster_cols = F,
cluster_rows = F,
main = paste0("Means of ",var," by Site"))
}
#site, year, sowing, harvest doys for trials
#for trials that reached harvest
sysh_success <- charact_x %>% filter(!is.na(Start_DOY_7)) %>% mutate(sow_doy = Start_DOY_1, harvest_doy = Start_DOY_7 - 1) %>%
select(id_trial, Site, Year, Genetics, sow_doy, harvest_doy) %>% mutate(Stage = 11)
#get fake harvest date for failed trials, which will be the last day the plant was developing
sysh_failed <- charact_x %>% filter(is.na(Start_DOY_7)) %>% mutate(sow_doy = Start_DOY_1) %>% select(id_trial, Site, Year, Genetics, sow_doy)
fake_harvest <- daily_charact_x %>% select(DOY, id_trial, Stage) %>% filter(id_trial %in% sysh_failed$id_trial) %>%
group_by(id_trial) %>% filter(Stage == max(Stage)) %>% filter(DOY == min(DOY)) %>% #get date of highest stage of development
rename(harvest_doy = DOY)
sysh <- left_join(sysh_failed, fake_harvest) %>% rbind(sysh_success) %>% arrange(id_trial)
#accumulated precipitation and thermal time from time of sowing to time of harvest (or end of development for unharvested trials)
fullseason <- daily_charact_x %>% select(id_trial, DOY, AccPrecip, AccTT) %>% group_by(id_trial) %>% left_join(sysh) %>%
filter(DOY >= sow_doy & DOY <= harvest_doy) %>% summarize(AccPrecip = max(AccPrecip) - min(AccPrecip), AccTT = max(AccTT) - min(AccTT)) %>%
left_join(sysh)
#scaled accumulated precip and thermal time, by maturity and site
fullseason_comp <- fullseason %>% group_by(Site) %>%
mutate(scale_AccPrecip = as.numeric(scale(AccPrecip)),
scale_AccTT = as.numeric(scale(AccTT)))
#esquisser(fullseason_comp)
current_year <- as.numeric(substr(Sys.time(),1,4)) - 1
bigmet <- data.frame()
for(s in 1:max(trials_df$id_loc)){
lil_met <- read_apsim_met(paste0("met/loc_",s,".met"), verbose = F) %>% as_tibble() %>%
filter(year >= current_year - 9, year <= current_year) %>% mutate(id_loc = s)
bigmet <- rbind(bigmet, lil_met)
}
q()
library(shiny); runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
library(shiny); runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
install.packages("shinyjs")
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
library(shiny); runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
View(sysh_failed)
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('GitHub/APSIMX_SeasonalCharacterization/app_test.R')
# Process each batch
for (batch in 1:num_batches) {
# Determine the rows for the current batch
batch_rows <- ((batch - 1) * batch_size + 1):min(nrow(trials_df), batch * batch_size)
batch_trials <- trials_df[batch_rows, ]
# Split trials for parallel execution
trial_list <- split(batch_trials, seq(nrow(batch_trials)))
# Run APSIM simulations in parallel for the current batch
# Run APSIM simulations in parallel
results <- parLapply(cl, trial_list, function(trial) {
Sys.setlocale("LC_ALL", "English_United States")
trial_n <- trial$id_trial  # Assuming 'id_trial' is the identifier
source_dir <- paste0("apsim/trial_", trial_n)
filename <- paste0(crop, "_", trial_n, ".apsimx")
output <- data.frame()  # Initialize an empty data frame for the results
log_file <- paste0(source_dir, "/", crop, "_", trial_n, "_log.txt")
#sink(log_file, append = TRUE)
# Wrap APSIM simulation and result handling in tryCatch to handle any errors
tryCatch({
output_tmp <- apsimx(filename, src.dir = source_dir)
output_tmp <- mutate(output_tmp, "id_trial" = trial_n)
# Append the output of this trial to the overall results
output <- rbind(output, output_tmp)
# Save individual trial results
write_csv(output_tmp, file = paste0(source_dir, "/", crop, "_", trial_n, "_out.csv"))
cat(sprintf("Successfully written file for trial %d", trial_n))
return(output)  # Return the output for this trial
}, error = function(e){
cat(paste0("Simulation for trial ", trial_n, " failed with error: ", e$message, "\n"))
return(NULL)  # Return NULL if there was an error
})
})
# Combine the results from this batch and add to the all_results list
batch_results <- do.call(rbind, results)
all_results[[batch]] <- batch_results
# Print out the progress
cat(sprintf("Completed batch %d out of %d (%.2f%%)\n", batch, num_batches, 100 * batch / num_batches))
progressoutput <- sprintf("Completed batch %d out of %d (%.2f%%)", batch, num_batches, 100 * batch / num_batches)
log_progress(progressoutput)
}
log_progress <- function(message) {
write(message, file = "progress.log", append = TRUE)
}
#get feedback from breeders on what they think is valuable and what kind of outputs they value
#for over-performance / under-performance can use maturity checks as yield checks
#check that the actual maturity (DtM) and simulated maturities (stage DOYs) are accurate
#investigate structural equation modeling
#build a machine learning model directly off the seasonal parameters instead of just using the apsim yield output
#which of the seasonal variables are affecting the performance of the varieties
# Start, set up trials_df -----
library(apsimx)
library(tidyverse)
library(daymetr)
library(data.table)
library(soilDB)
library(spData)
library(parallel)  # For parallel computing
Sys.setlocale("LC_ALL", "English_United States")
start_time <- Sys.time() # track running time
codes_dir <- "C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization" #where the folder with the codes is
#codes_dir <- "~/GitHub/APSIMX_SeasonalCharacterization"
#codes_dir <- "/Users/cmg3/Documents/GitHub/APSIMX_SeasonalCharacterization"
setwd("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization/apsimx_output")
#setwd("C:/Users/cmg3/Box/Gilbert/apsimx_output")
#setwd("~/Library/CloudStorage/Box-Box/apsimx_output")
clear_progress_log <- function() {
fileConn <- file("progress.log", "w")
close(fileConn)
}
log_progress <- function(message) {
write(message, file = "progress.log", append = TRUE)
}
log_progress("Starting analysis")
crop <- readLines(paste0(codes_dir, "/selected_crop.txt"))
trials_df <- read_csv(paste0(codes_dir,"/apsimx_output/output/input.csv")) %>% distinct() %>% mutate(id_trial = row_number()) %>%
rename(X = Longitude, Y = Latitude)
runApp('~/GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('~/GitHub/APSIMX_SeasonalCharacterization/app_test.R')
