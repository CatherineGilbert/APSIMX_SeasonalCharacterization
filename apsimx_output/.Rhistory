horizon <- soil_profile_tmp[[1]]$soil
soilwat <- soilwat_parms() #creating SWCON in SoilWater parameters
PO <- 1-horizon$BD/2.65
soilwat$SWCON <- (PO-horizon$DUL)/PO
soilwat$SWCON <- ifelse(soilwat$SWCON < 0, 0, soilwat$SWCON)
soilwat$Thickness <- horizon$Thickness
soil_profile_tmp[[1]]$soilwat <- soilwat
initwat <- initialwater_parms() #set initial water to reasonable values
initwat$InitialValues <- horizon$DUL
initwat$Thickness <- horizon$Thickness
soil_profile_tmp[[1]]$initialwater <- initwat
oc_min <- 0.001 #set minimum carbon content in soils
given_oc <- soil_profile_tmp[[1]][["soil"]]$Carbon
soil_profile_tmp[[1]][["soil"]]$Carbon <- ifelse(given_oc < oc_min, oc_min, given_oc)
write_rds(soil_profile_tmp, file = paste0("soils/soil_profile_",id))
soil_profile_list[[as.character(id)]] <- soil_profile_tmp[[1]]
locs_df[locs_df$id_loc == id,"got_soil"] <- T
print(paste0("loc: ",id,"   ",round(which(ids_needs_soil == id)/length(ids_needs_soil),4)))
}, error = function(e){
print(e)
locs_df[locs_df$id_loc == id,"got_soil"] <<- F
print(paste0("loc: ",id,"   ",round(which(ids_needs_soil == id)/length(ids_needs_soil),4),"  FAIL"))
})
}
write_rds(soil_profile_list, "soils/soil_profile_list.rds")
#get feedback from breeders on what they think is valuable and what kind of outputs they value
#for over-performance / under-performance can use maturity checks as yield checks
#check that the actual maturity (DtM) and simulated maturities (stage DOYs) are accurate
#investigate structural equation modeling
#build a machine learning model directly off the seasonal parameters instead of just using the apsim yield output
#which of the seasonal variables are affecting the performance of the varieties
# Start, set up trials_df -----
library(apsimx)
library(tidyverse)
library(daymetr)
library(data.table)
library(soilDB)
library(spData)
library(parallel)  # For parallel computing
Sys.setlocale("LC_ALL", "English_United States")
start_time <- Sys.time() # track running time
codes_dir <- "C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization" #where the folder with the codes is
#codes_dir <- "~/GitHub/APSIMX_SeasonalCharacterization"
#codes_dir <- "/Users/cmg3/Documents/GitHub/APSIMX_SeasonalCharacterization"
setwd("C:/Users/sam/Documents/GitHub/APSIMX_SeasonalCharacterization/apsimx_output")
#setwd("C:/Users/cmg3/Box/Gilbert/nust_apsimx_output")
#setwd("~/Library/CloudStorage/Box-Box/apsimx_output")
crop <- "Soy" #  !!! ask Sam if this can be set via a button
trials_df <- read_csv(paste0(codes_dir,"/verify.csv")) %>% distinct() %>% mutate(id_trial = row_number()) %>%
rename(X = Longitude, Y = Latitude)
locs_df <- select(trials_df, X, Y) %>% distinct() %>% mutate(id_loc = row_number())
trials_df <- left_join(trials_df, locs_df)
trials_df <- trials_df %>% mutate(Planting = as.Date(Planting), Year = format(Planting,"%Y")) %>%
mutate(sim_start = Planting %m-% months(2), sim_end = Planting %m+% months(8))
# Get what maturities of cultivar we'll use
if (crop == "Soy"){
trials_df <- trials_df %>%
mutate(Mat = case_when(
Genetics > 10 ~ "10",
Genetics <= -2 ~ "000",
Genetics == -1 ~ "00",
Genetics == 0 ~ "0",
Genetics >= 1 & Genetics <= 9 ~ as.character(Genetics)
)) %>% mutate(Mat = paste0("Generic_MG",Mat))
}
if (crop == "Maize"){
corn_mats <- c(80,90,95,100,103,105,108,110,112,115,120,130)
trials_df <- trials_df %>%
mutate(Mat = corn_mats[which.min(abs(corn_mats - Genetics))[1]]) %>%
mutate(Mat = paste0("B_",as.character(Mat)))
}
# Get weather, make met files -----
prev_year <- as.numeric(substr(Sys.time(),1,4)) - 1
locyear_df <- trials_df %>% select(X,Y,id_loc, sim_start) %>%
mutate(first_year = year(sim_start)) %>%
select(-sim_start) %>% unique() %>% group_by(id_loc,X,Y) %>%
summarize(first_year = min(first_year)) %>%
mutate(first_year = min(first_year, prev_year - 10), last_year = prev_year)
unlink("met",recursive = T) ; dir.create("met")
# Setup for parallel processing
no_cores <- detectCores() - 2  # Reserve 2 cores for the system
cl <- makeCluster(no_cores)
clusterExport(cl, varlist = c("locyear_df","get_daymet2_apsim_met", "napad_apsim_met", "impute_apsim_met", "write_apsim_met"), envir = environment())
# Ensure the directory exists for weather data
dir.create("met", recursive = TRUE, showWarnings = FALSE)
parLapply(cl, seq_len(nrow(locyear_df)), function(idx) {
locyear_tmp <- locyear_df[idx, ]
try({
met_tmp <- get_daymet2_apsim_met(lonlat = c(locyear_tmp$X, locyear_tmp$Y),
years = c(as.integer(locyear_tmp$first_year), as.integer(locyear_tmp$last_year)),
silent = TRUE)
na_met_tmp <- tryCatch(napad_apsim_met(met_tmp), error = function(e) met_tmp)
imp_met_tmp <- tryCatch(impute_apsim_met(na_met_tmp), warning = function(w) na_met_tmp)
attr(imp_met_tmp, "site") <- attr(met_tmp, "site")
attr(imp_met_tmp, "latitude") <- attr(met_tmp, "latitude")
attr(imp_met_tmp, "longitude") <- attr(met_tmp, "longitude")
write_apsim_met(imp_met_tmp, wrt.dir = "met", paste0("loc_", locyear_tmp$id_loc, ".met"))
})
})
# Get soil, make soil file -----
soil_profile_list = list()
unlink("soils",recursive = T) ; dir.create("soils")
locs_df$got_soil <- NA
ids_needs_soil <- locs_df[locs_df$got_soil == F | is.na(locs_df$got_soil),]$id_loc
for (id in ids_needs_soil){
locs_tmp <- locs_df[locs_df$id_loc == id,]
tryCatch({
soil_profile_tmp <- tryCatch(get_ssurgo_soil_profile(lonlat = c(locs_tmp$X,locs_tmp$Y), fix = T),
error = function(e){soil_profile_tmp <- list(get_isric_soil_profile(lonlat = c(locs_tmp$X,locs_tmp$Y), fix = T))})
horizon <- soil_profile_tmp[[1]]$soil
soilwat <- soilwat_parms() #creating SWCON in SoilWater parameters
PO <- 1-horizon$BD/2.65
soilwat$SWCON <- (PO-horizon$DUL)/PO
soilwat$SWCON <- ifelse(soilwat$SWCON < 0, 0, soilwat$SWCON)
soilwat$Thickness <- horizon$Thickness
soil_profile_tmp[[1]]$soilwat <- soilwat
initwat <- initialwater_parms() #set initial water to reasonable values
initwat$InitialValues <- horizon$DUL
initwat$Thickness <- horizon$Thickness
soil_profile_tmp[[1]]$initialwater <- initwat
oc_min <- 0.001 #set minimum carbon content in soils
given_oc <- soil_profile_tmp[[1]][["soil"]]$Carbon
soil_profile_tmp[[1]][["soil"]]$Carbon <- ifelse(given_oc < oc_min, oc_min, given_oc)
write_rds(soil_profile_tmp, file = paste0("soils/soil_profile_",id))
soil_profile_list[[as.character(id)]] <- soil_profile_tmp[[1]]
locs_df[locs_df$id_loc == id,"got_soil"] <- T
print(paste0("loc: ",id,"   ",round(which(ids_needs_soil == id)/length(ids_needs_soil),4)))
}, error = function(e){
locs_df[locs_df$id_loc == id,"got_soil"] <<- F
print(paste0("loc: ",id,"   ",round(which(ids_needs_soil == id)/length(ids_needs_soil),4),"  FAIL"))
})
}
write_rds(soil_profile_list, "soils/soil_profile_list.rds")
View(horizon)
View(soil_profile_tmp)
View(soil_profile_list)
library(shiny); runApp('~/GitHub/APSIMX_SeasonalCharacterization/app_test.R')
library(pheatmap)
library(janitor)
library(RColorBrewer)
library(tidyverse)
library(esquisse)
library(lubridate)
#fernando miguez for information on why APSIM soybean model may not be progressing correctly
trials_x <- read_csv("output/trials_x.csv")
charact_x <- read_csv("output/charact_x.csv")
daily_charact_x <- read_csv("output/daily_charact_x.csv")
var <- "Rain"
gen <- 3
site_tag <- "ames_ia"
varchoice <- charact_x %>% ungroup() %>% select(where(is.numeric) & !c(id_trial, Period)) %>% names()
j_dt <- filter(trials_x, Genetics == gen) %>% select(id_trial,Genetics, Site) %>% left_join(charact_x)
for(var in varchoice){
var_mat <- j_dt %>% select(id_trial, Site, Period, starts_with(var)) %>%
pivot_wider(names_from = Period, values_from = var) %>% select(-id_trial) %>%
group_by(Site) %>% summarize(across(where(is.numeric), function(x){mean(x,na.rm=T)})) %>%
column_to_rownames("Site") %>%
remove_empty(which = "rows") %>%
as.matrix()
pheatmap(var_mat, angle_col = 45,
color=brewer.pal(11,"RdBu"),
fontsize = 10,
display_numbers = round(var_mat, 2),
number_color = "white",
#scale = "column",
number_format = "%.2f",
legend = F,
cluster_cols = F,
cluster_rows = T,
main = paste0("Means of ",var," by Site (MG ",gen,")"))
}
#get thermal time and precip for the last ten years of records
current_year <- as.numeric(substr(Sys.time(),1,4)) - 1
bigmet <- data.frame()
for(s in 1:max(trials_x$id_loc)){
lil_met <- read_apsim_met(paste0("met/loc_",s,".met"), verbose = F) %>% as_tibble() %>%
filter(year >= current_year - 9, year <= current_year) %>% mutate(id_loc = s)
bigmet <- rbind(bigmet, lil_met)
}
bigmet <- trials_x %>% select(Site, id_loc) %>% distinct() %>% left_join(bigmet) %>% group_by(Site, id_loc, year, day)
max_temp = 34 #thermal time max temp
base_temp = 0 #thermal time base temp
bigmet <- mutate(bigmet, tt = max((min(maxt,max_temp)+max(mint,base_temp))/2 - base_temp,0)) %>% ungroup()
#start and end of simulation as doy, going over 365 if wrapping over the new year
startend <- select(daily_charact_x, id_trial, DOY, Stage) %>% filter(Stage != 1) %>%
group_by(id_trial) %>% filter(Stage == max(Stage) | Stage == min(Stage)) %>%
summarize(first_doy = DOY[1], final_doy = DOY[2]) %>%
mutate(final_doy = ifelse(final_doy < first_doy, final_doy + 365, final_doy)) %>%
left_join(select(trials_x, Site, Year,id_trial,Genetics)) %>% ungroup()
#mean start doy and end doy for each site
mean_startend <- group_by(startend, Site) %>%
summarize(first_doy = mean(first_doy, na.rm = T), final_doy = mean(final_doy, na.rm = T)) %>%
mutate(final_doy = ifelse(final_doy > 365, final_doy - 365, final_doy))
#season limited to average start and end of simulations
filtmet <- bigmet %>% left_join(mean_startend) %>% filter(day >= first_doy & day <= final_doy)
filtmet <- filter(filtmet, Site %in% c("ames_ia","urbana_il","lubbock_tx","colombia_mo","centerville_sd"))
#accumulation of thermal time / precip for an average season at each site
#doy of sowing/harvest set on average dates based on trials that were input
dbtw_sites <- filtmet %>% group_by(Site, year) %>%
mutate(acc_precip = cumsum(rain), acc_tt = cumsum(tt)) %>%
ungroup() %>% group_by(Site, day) %>%
summarize(acc_precip= mean(acc_precip, na.rm = T), acc_tt = mean(acc_tt, na.rm = T))
ggplot(dbtw_sites) +
aes(x = day, y = acc_precip, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Day of Year", y = "Accumulated Precipitation (mm)") +
theme_minimal()
ggplot(dbtw_sites) +
aes(x = day, y = acc_tt, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Day of Year", y = "Accumulated Thermal Time") +
theme_minimal()
#days after sowing
sdbtw_sites <- dbtw_sites %>% mutate(day = day-min(day)+1)
ggplot(sdbtw_sites) +
aes(x = day, y = acc_precip, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Days after Sowing", y = "Acc. Precipitation (mm)") +
theme_minimal()
ggplot(sdbtw_sites) +
aes(x = day, y = acc_tt, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Days after Sowing", y = "Acc. Thermal Time") +
theme_minimal()
#cross charts comparing accumulated precip/thermal time
wthn_sites <- filtmet %>% ungroup() %>% group_by(Site, year) %>%
summarize(acc_precip = sum(rain), acc_tt = sum(tt))
#comparing conditions over the last ten years at the same site
plot_dt <- filter(wthn_sites, Site == site_tag)
ggplot(plot_dt) +
aes(x = acc_precip, y = acc_tt) +
geom_vline(aes(xintercept = mean(acc_precip)), color = "black", linetype = "dashed") +
geom_hline(aes(yintercept = mean(acc_tt)), color = "black", linetype = "dashed") +
geom_label(label = plot_dt$year, size = 3L) +
labs(x = "Acc. Precipitation (mm)",y = "Acc. Thermal Time",
title = paste0("Conditions at [",site_tag,"]")) +
theme_minimal()
#comparing conditions over the last ten years, faceted for several sites
means <- wthn_sites %>% group_by(Site) %>%
summarise(mean_acc_precip = mean(acc_precip),
mean_acc_tt = mean(acc_tt))
ggplot(wthn_sites) +
aes(x = acc_precip, y = acc_tt) +
facet_wrap(vars(Site), scales = "free") +
geom_vline(data = means, aes(xintercept = mean_acc_precip), color = "black", linetype = "dashed") +
geom_hline(data = means, aes(yintercept = mean_acc_tt), color = "black", linetype = "dashed") +
geom_label(label = wthn_sites$year, size = 3) +
labs(x = "Acc. Precipitation (mm)",y = "Acc. Thermal Time") +
theme_minimal() +
theme(legend.position = "none")
#summarizing conditions over the last ten years, for several sites
plot_dt <- wthn_sites %>% summarize(acc_precip = mean(acc_precip), acc_tt = mean(acc_tt))
ggplot(plot_dt) +
aes(x = acc_precip, y = acc_tt) +
geom_vline(aes(xintercept = mean(acc_precip)), color = "black", linetype = "dashed") +
geom_hline(aes(yintercept = mean(acc_tt)), color = "black", linetype = "dashed") +
geom_label(label = btwn_sites$Site, size = 3) +
theme_minimal() +
labs(x = "Acc. Precipitation (mm)",y = "Acc. Thermal Time",
title = "10 Year Site Averages for a Typical Growing Season") +
theme(legend.position = "none")
View(wthn_sites)
#get thermal time and precip for the last ten years of records
current_year <- as.numeric(substr(Sys.time(),1,4)) - 1
bigmet <- data.frame()
for(s in 1:max(trials_x$id_loc)){
lil_met <- read_apsim_met(paste0("met/loc_",s,".met"), verbose = F) %>% as_tibble() %>%
filter(year >= current_year - 9, year <= current_year) %>% mutate(id_loc = s)
bigmet <- rbind(bigmet, lil_met)
}
bigmet <- trials_x %>% select(Site, id_loc) %>% distinct() %>% left_join(bigmet) %>% group_by(Site, id_loc, year, day)
max_temp = 34 #thermal time max temp
base_temp = 0 #thermal time base temp
bigmet <- mutate(bigmet, tt = max((min(maxt,max_temp)+max(mint,base_temp))/2 - base_temp,0)) %>% ungroup()
#start and end of simulation as doy, going over 365 if wrapping over the new year
startend <- select(daily_charact_x, id_trial, DOY, Stage) %>% filter(Stage != 1) %>%
group_by(id_trial) %>% filter(Stage == max(Stage) | Stage == min(Stage)) %>%
summarize(first_doy = DOY[1], final_doy = DOY[2]) %>%
mutate(final_doy = ifelse(final_doy < first_doy, final_doy + 365, final_doy)) %>%
left_join(select(trials_x, Site, Year,id_trial,Genetics)) %>% ungroup()
#mean start doy and end doy for each site
mean_startend <- group_by(startend, Site) %>%
summarize(first_doy = mean(first_doy, na.rm = T), final_doy = mean(final_doy, na.rm = T)) %>%
mutate(final_doy = ifelse(final_doy > 365, final_doy - 365, final_doy))
#season limited to average start and end of simulations
filtmet <- bigmet %>% left_join(mean_startend) %>% filter(day >= first_doy & day <= final_doy)
filtmet <- filter(filtmet, Site %in% c("ames_ia","urbana_il","lubbock_tx","colombia_mo","centerville_sd"))
#accumulation of thermal time / precip for an average season at each site
#doy of sowing/harvest set on average dates based on trials that were input
dbtw_sites <- filtmet %>% group_by(Site, year) %>%
mutate(acc_precip = cumsum(rain), acc_tt = cumsum(tt)) %>%
ungroup() %>% group_by(Site, day) %>%
summarize(acc_precip= mean(acc_precip, na.rm = T), acc_tt = mean(acc_tt, na.rm = T))
ggplot(dbtw_sites) +
aes(x = day, y = acc_precip, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Day of Year", y = "Accumulated Precipitation (mm)") +
theme_minimal()
ggplot(dbtw_sites) +
aes(x = day, y = acc_tt, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Day of Year", y = "Accumulated Thermal Time") +
theme_minimal()
#days after sowing
sdbtw_sites <- dbtw_sites %>% mutate(day = day-min(day)+1)
ggplot(sdbtw_sites) +
aes(x = day, y = acc_precip, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Days after Sowing", y = "Acc. Precipitation (mm)") +
theme_minimal()
ggplot(sdbtw_sites) +
aes(x = day, y = acc_tt, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Days after Sowing", y = "Acc. Thermal Time") +
theme_minimal()
#cross charts comparing accumulated precip/thermal time
wthn_sites <- filtmet %>% ungroup() %>% group_by(Site, year) %>%
summarize(acc_precip = sum(rain), acc_tt = sum(tt))
#comparing conditions over the last ten years at the same site
plot_dt <- filter(wthn_sites, Site == site_tag)
ggplot(plot_dt) +
aes(x = acc_precip, y = acc_tt) +
geom_vline(aes(xintercept = mean(acc_precip)), color = "black", linetype = "dashed") +
geom_hline(aes(yintercept = mean(acc_tt)), color = "black", linetype = "dashed") +
geom_label(label = plot_dt$year, size = 3L) +
labs(x = "Acc. Precipitation (mm)",y = "Acc. Thermal Time",
title = paste0("Conditions at [",site_tag,"]")) +
theme_minimal()
View(wthn_sites)
View(wthn_sites)
plot_dt <- filter(wthn_sites, Site == site_tag)
ggplot(plot_dt) +
aes(x = acc_precip, y = acc_tt) +
geom_vline(aes(xintercept = mean(acc_precip)), color = "black", linetype = "dashed") +
geom_hline(aes(yintercept = mean(acc_tt)), color = "black", linetype = "dashed") +
geom_label(label = plot_dt$year, size = 3L) +
labs(x = "Acc. Precipitation (mm)",y = "Acc. Thermal Time",
title = paste0("Conditions at [",site_tag,"]")) +
theme_minimal()
means <- wthn_sites %>% group_by(Site) %>%
summarise(mean_acc_precip = mean(acc_precip),
mean_acc_tt = mean(acc_tt))
ggplot(wthn_sites) +
aes(x = acc_precip, y = acc_tt) +
facet_wrap(vars(Site), scales = "free") +
geom_vline(data = means, aes(xintercept = mean_acc_precip), color = "black", linetype = "dashed") +
geom_hline(data = means, aes(yintercept = mean_acc_tt), color = "black", linetype = "dashed") +
geom_label(label = wthn_sites$year, size = 3) +
labs(x = "Acc. Precipitation (mm)",y = "Acc. Thermal Time") +
theme_minimal() +
theme(legend.position = "none")
plot_dt <- wthn_sites %>% summarize(acc_precip = mean(acc_precip), acc_tt = mean(acc_tt))
ggplot(plot_dt) +
aes(x = acc_precip, y = acc_tt) +
geom_vline(aes(xintercept = mean(acc_precip)), color = "black", linetype = "dashed") +
geom_hline(aes(yintercept = mean(acc_tt)), color = "black", linetype = "dashed") +
geom_label(label = btwn_sites$Site, size = 3) +
theme_minimal() +
labs(x = "Acc. Precipitation (mm)",y = "Acc. Thermal Time",
title = "10 Year Site Averages for a Typical Growing Season") +
theme(legend.position = "none")
View(wthn_sites)
View(plot_dt)
library(pheatmap)
library(janitor)
library(RColorBrewer)
library(tidyverse)
library(esquisse)
library(lubridate)
#fernando miguez for information on why APSIM soybean model may not be progressing correctly
trials_x <- read_csv("output/trials_x.csv")
charact_x <- read_csv("output/charact_x.csv")
daily_charact_x <- read_csv("output/daily_charact_x.csv")
var <- "Rain"
gen <- 3
site_tag <- "ames_ia"
varchoice <- charact_x %>% ungroup() %>% select(where(is.numeric) & !c(id_trial, Period)) %>% names()
j_dt <- filter(trials_x, Genetics == gen) %>% select(id_trial,Genetics, Site) %>% left_join(charact_x)
for(var in varchoice){
var_mat <- j_dt %>% select(id_trial, Site, Period, starts_with(var)) %>%
pivot_wider(names_from = Period, values_from = var) %>% select(-id_trial) %>%
group_by(Site) %>% summarize(across(where(is.numeric), function(x){mean(x,na.rm=T)})) %>%
column_to_rownames("Site") %>%
remove_empty(which = "rows") %>%
as.matrix()
pheatmap(var_mat, angle_col = 45,
color=brewer.pal(11,"RdBu"),
fontsize = 10,
display_numbers = round(var_mat, 2),
number_color = "white",
#scale = "column",
number_format = "%.2f",
legend = F,
cluster_cols = F,
cluster_rows = T,
main = paste0("Means of ",var," by Site (MG ",gen,")"))
}
#get thermal time and precip for the last ten years of records
current_year <- as.numeric(substr(Sys.time(),1,4)) - 1
bigmet <- data.frame()
for(s in 1:max(trials_x$id_loc)){
lil_met <- read_apsim_met(paste0("met/loc_",s,".met"), verbose = F) %>% as_tibble() %>%
filter(year >= current_year - 9, year <= current_year) %>% mutate(id_loc = s)
bigmet <- rbind(bigmet, lil_met)
}
bigmet <- trials_x %>% select(Site, id_loc) %>% distinct() %>% left_join(bigmet) %>% group_by(Site, id_loc, year, day)
max_temp = 34 #thermal time max temp
base_temp = 0 #thermal time base temp
bigmet <- mutate(bigmet, tt = max((min(maxt,max_temp)+max(mint,base_temp))/2 - base_temp,0)) %>% ungroup()
#start and end of simulation as doy, going over 365 if wrapping over the new year
startend <- select(daily_charact_x, id_trial, DOY, Stage) %>% filter(Stage != 1) %>%
group_by(id_trial) %>% filter(Stage == max(Stage) | Stage == min(Stage)) %>%
summarize(first_doy = DOY[1], final_doy = DOY[2]) %>%
mutate(final_doy = ifelse(final_doy < first_doy, final_doy + 365, final_doy)) %>%
left_join(select(trials_x, Site, Year,id_trial,Genetics)) %>% ungroup()
#mean start doy and end doy for each site
mean_startend <- group_by(startend, Site) %>%
summarize(first_doy = mean(first_doy, na.rm = T), final_doy = mean(final_doy, na.rm = T)) %>%
mutate(final_doy = ifelse(final_doy > 365, final_doy - 365, final_doy))
#season limited to average start and end of simulations
filtmet <- bigmet %>% left_join(mean_startend) %>% filter(day >= first_doy & day <= final_doy)
filtmet <- filter(filtmet, Site %in% c("ames_ia","urbana_il","lubbock_tx","colombia_mo","centerville_sd"))
#accumulation of thermal time / precip for an average season at each site
#doy of sowing/harvest set on average dates based on trials that were input
dbtw_sites <- filtmet %>% group_by(Site, year) %>%
mutate(acc_precip = cumsum(rain), acc_tt = cumsum(tt)) %>%
ungroup() %>% group_by(Site, day) %>%
summarize(acc_precip= mean(acc_precip, na.rm = T), acc_tt = mean(acc_tt, na.rm = T))
ggplot(dbtw_sites) +
aes(x = day, y = acc_precip, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Day of Year", y = "Accumulated Precipitation (mm)") +
theme_minimal()
ggplot(dbtw_sites) +
aes(x = day, y = acc_tt, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Day of Year", y = "Accumulated Thermal Time") +
theme_minimal()
#days after sowing
sdbtw_sites <- dbtw_sites %>% mutate(day = day-min(day)+1)
ggplot(sdbtw_sites) +
aes(x = day, y = acc_precip, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Days after Sowing", y = "Acc. Precipitation (mm)") +
theme_minimal()
ggplot(sdbtw_sites) +
aes(x = day, y = acc_tt, colour = Site) +
geom_line() +
scale_color_hue(direction = 1) +
labs(x = "Days after Sowing", y = "Acc. Thermal Time") +
theme_minimal()
#cross charts comparing accumulated precip/thermal time
wthn_sites <- filtmet %>% ungroup() %>% group_by(Site, year) %>%
summarize(acc_precip = sum(rain), acc_tt = sum(tt))
#comparing conditions over the last ten years at the same site
plot_dt <- filter(wthn_sites, Site == site_tag)
ggplot(plot_dt) +
aes(x = acc_precip, y = acc_tt) +
geom_vline(aes(xintercept = mean(acc_precip)), color = "black", linetype = "dashed") +
geom_hline(aes(yintercept = mean(acc_tt)), color = "black", linetype = "dashed") +
geom_label(label = plot_dt$year, size = 3L) +
labs(x = "Acc. Precipitation (mm)",y = "Acc. Thermal Time",
title = paste0("Conditions at [",site_tag,"]")) +
theme_minimal()
#comparing conditions over the last ten years, faceted for several sites
means <- wthn_sites %>% group_by(Site) %>%
summarise(mean_acc_precip = mean(acc_precip),
mean_acc_tt = mean(acc_tt))
ggplot(wthn_sites) +
aes(x = acc_precip, y = acc_tt) +
facet_wrap(vars(Site), scales = "free") +
geom_vline(data = means, aes(xintercept = mean_acc_precip), color = "black", linetype = "dashed") +
geom_hline(data = means, aes(yintercept = mean_acc_tt), color = "black", linetype = "dashed") +
geom_label(label = wthn_sites$year, size = 3) +
labs(x = "Acc. Precipitation (mm)",y = "Acc. Thermal Time") +
theme_minimal() +
theme(legend.position = "none")
#summarizing conditions over the last ten years, for several sites
plot_dt <- wthn_sites %>% summarize(acc_precip = mean(acc_precip), acc_tt = mean(acc_tt))
ggplot(plot_dt) +
aes(x = acc_precip, y = acc_tt) +
geom_vline(aes(xintercept = mean(acc_precip)), color = "black", linetype = "dashed") +
geom_hline(aes(yintercept = mean(acc_tt)), color = "black", linetype = "dashed") +
geom_label(label = plot_dt$Site, size = 3) +
theme_minimal() +
labs(x = "Acc. Precipitation (mm)",y = "Acc. Thermal Time",
title = "10 Year Site Averages for a Typical Growing Season") +
theme(legend.position = "none")
#accumulated precipitation and thermal time from time of sowing to time of harvest
#(or end of development for unharvested trials) for each trial/genetics/site
# trial_comp <- select(daily_charact_x, Stage, id_trial, Rain, ThermalTime) %>% filter(Stage != 1) %>%
#   group_by(id_trial) %>% summarize(acc_precip = sum(Rain), acc_tt = sum(ThermalTime)) %>%
#   left_join(.,select(trials_x, Site, Genetics, id_trial, Year))
View(plot_dt)
View(filtmet)
View(bigmet)
runApp('~/GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('~/GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('~/GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('~/GitHub/APSIMX_SeasonalCharacterization/app_test.R')
runApp('~/GitHub/APSIMX_SeasonalCharacterization/app_test.R')
